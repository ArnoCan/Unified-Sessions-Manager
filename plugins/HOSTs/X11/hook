#!/bin/bash

########################################################################
#
#PROJECT:      Unified Sessions Manager
#AUTHOR:       Arno-Can Uestuensoez - acue@UnifiedSessionsManager.org
#MAINTAINER:   Arno-Can Uestuensoez - acue_sf1@sourceforge.net
#SHORT:        ctys
#CALLFULLNAME: Commutate To Your Session
#LICENCE:      GPL3
#VERSION:      01_02_007a17
#
########################################################################
#
# Copyright (C) 2007 Arno-Can Uestuensoez (UnifiedSessionsManager.org)
#
########################################################################

X11_MAGIC=X11_GENERIC;
X11_VERSTRING=;
X11_STATE=DISABLED;
X11SERVER_OPT=;
X11VIEWER_OPT=;
X11_PREREQ="X xterm";



_myPKGNAME_X11="${BASH_SOURCE}"
_myPKGVERS_X11="01.01.001a02"
hookInfoAdd $_myPKGNAME_X11 $_myPKGVERS_X11
_myPKGBASE_X11="${_myPKGNAME_X11%/hook}"
_X11="${_myPKGBASE_X11}hook"

CTRL_X11_DEFAULT="${CTRL_X11_DEFAULT:-bash -l -i}"

if [ -d "${HOME}/.ctys" -a -d "${HOME}/.ctys/cli" ];then
    #Source pre-set environment from user
    if [ -f "${HOME}/.ctys/cli/cli.conf" ];then
	. "${HOME}/.ctys/cli/cli.conf"
    fi

    #Source pre-set environment from installation 
    if [ -f "${MYCONFPATH}/conf/cli/cli.conf" ];then
	. "${MYCONFPATH}/conf/cli/cli.conf"
    fi
fi




#FUNCBEG###############################################################
#NAME:
#  serverRequireX11
#
#TYPE:
#  bash-function
#
#DESCRIPTION:
#  Reports whether a server component has to be called for the current
#  action.
#
#EXAMPLE:
#
#PARAMETERS:
# $*: ${EXECCALL}|<options-list>
#     Generally a string containing an <options-list>, where the
#     first match is choosen. So only one type option is allowed to
#     be contained.
#
#OUTPUT:
#  RETURN:
#    INPUT, where required changes for destination are set.
#  VALUES:
#    0: true, required - output is valid.
#    1: false, not required - output is not valid.
#
#FUNCEND###############################################################
function serverRequireX11 () {
    printVerboseDebug ${DBG_LVL_HAYSTACK} $LINENO $BASH_SOURCE "$FUNCNAME \$@=$@"
    local _CS_SPLIT=`echo ${*}|sed -n 's/ConnectionForwarding/ServerOnly/p'`;
    local _S=`getSessionType ${*}`;_S=${_S:-$CTRL_SESSIONTYPE};
    local _A=`getActionResulting ${*}`;
    local _ret=1;
    local _res=;

    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $BASH_SOURCE "_CS_SPLIT=\"${_CS_SPLIT}\""
    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $BASH_SOURCE "_S=\"${_S}\""
    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $BASH_SOURCE "_A=\"${_A}\""


    #if split not supported server only could be used
    if [ -n "${_CS_SPLIT}" ];then
	ABORT=1;
	printERR $LINENO $BASH_SOURCE ${ABORT} "The console type X11 doe not support ConnectionForwariding"
	gotoHell ${ABORT}
    else
 	_res="${*}";_ret=0;
    fi

    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $BASH_SOURCE "$FUNCNAME:_res=\"${_res}\""
    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $BASH_SOURCE "$FUNCNAME:_ret=\"${_ret}\""
    echo -n "${_res}";
    return ${_ret};  
}



#FUNCBEG###############################################################
#NAME:
#  clientRequireX11
#
#TYPE:
#  bash-function
#
#DESCRIPTION:
#  Reports whether a client component has to be called for the current
#  action.
#
#EXAMPLE:
#
#PARAMETERS:
# $*: ${EXECCALL}|<options-list>
#     Generally a string containing an <options-list>, where the
#     first match is choosen. So only one type option is allowed to
#     be contained.
#
#OUTPUT:
#  RETURN:
#    INPUT, where required changes for destination are set.
#  VALUES:
#    0: true, required - output is valid.
#    1: false, not required - output is not valid.
#
#FUNCEND###############################################################
function clientRequireX11 () {
    printVerboseDebug ${DBG_LVL_HAYSTACK} $LINENO $BASH_SOURCE "$FUNCNAME \$@=$@"
    local _CS_SPLIT=`echo ${*}|sed -n 's/ConnectionForwarding/1/p'`;
    local _S=`getSessionType ${*}`;_S=${_S:-$CTRL_SESSIONTYPE};
    local _A=`getActionResulting ${*}`;
    local _ret=1;
    local _res=;

    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $BASH_SOURCE "_CS_SPLIT=\"${_CS_SPLIT}\""
    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $BASH_SOURCE "_S=\"${_S}\""
    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $BASH_SOURCE "_A=\"${_A}\""

    #if split not supported server only could be used
    if [ -n "${_CS_SPLIT}" ];then
	ABORT=1;
	printERR $LINENO $BASH_SOURCE ${ABORT} "The console type X11 doe not support ConnectionForwarding"
	gotoHell ${ABORT}
    else
 	_res=;_ret=1;
    fi

    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $BASH_SOURCE "$FUNCNAME:_res=\"${_res}\""
    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $BASH_SOURCE "$FUNCNAME:_ret=\"${_ret}\""
    echo -n "${_res}";
    return ${_ret};  
}





#FUNCBEG###############################################################
#NAME:
#  setVersionX11
#
#TYPE:
#  bash-function
#
#DESCRIPTION:
#  Sets defaults and MAGIC-ID for local cli version.
#
#EXAMPLE:
#
#PARAMETERS:
#
#
#OUTPUT:
#  GLOBALS:
#  RETURN:
#  VALUES:
#
#FUNCEND###############################################################
function setVersionX11 () {
    local _checkonly=;
    if [ "$1" == "NOEXIT" ];then
	local _checkonly=1;        
    fi

    local _verstrg=;
    which X 2>/dev/null >/dev/null
    if [ $? -ne 0 ];then
	ABORT=2
	printERR $LINENO $_X11 ${ABORT} "Missing X for X11"
	printERR $LINENO $_X11 ${ABORT} "can not find:"
	printERR $LINENO $_X11 ${ABORT} " -> X"
	printERR $LINENO $_X11 ${ABORT} ""
	printERR $LINENO $_X11 ${ABORT} "Check your PATH"
	printERR $LINENO $_X11 ${ABORT} " -> PATH=${PATH}"
	printERR $LINENO $_X11 ${ABORT} ""
	if [ "${CTRL_SESSIONTYPE}" == "X11" -a -z "${_checkonly}" ];then
	    gotoHell ${ABORT}
	else
	    return ${ABORT}
	fi
    fi



    _verstrg=`X -version 2>&1|egrep '(X Protocol Version)'`
    if [ -z "${_verstrg}" ];then
	printWNG $LINENO $_X11 0  "Unidentified Software Object - X11x"
	printWNG $LINENO $_X11 0  "Scully is on the road..."
  	_verstrg=GENERIC

    fi
    X11_PREREQ=;

    printVerboseDebug ${DBG_LVL_UID} $LINENO $_X11 "X11"
    printVerboseDebug ${DBG_LVL_UID} $LINENO $_X11 "  _verstrg=${_verstrg}"

    which X 2>/dev/null >/dev/null
    if [ $? -eq 0 ];then
	X11_PREREQ="${X11_PREREQ} X11:X";
    else
	X11_PREREQ="${X11_PREREQ} <disabled:X:X11>";
    fi


    which xterm 2>/dev/null >/dev/null
    if [ $? -eq 0 ];then
	local _xtermver=`xterm -version`
	X11_PREREQ="${X11_PREREQ} xterm-${_xtermver}";
    else
	X11_PREREQ="${X11_PREREQ} <disabled:xterm>";
    fi


    which mwm 2>/dev/null >/dev/null
    if [ $? -eq 0 ];then
	X11_PREREQ="${X11_PREREQ} Motif:mwm";
    else
	X11_PREREQ="${X11_PREREQ} <disabled:Motif:mwm>";
    fi

    local _GDM=`which gdm 2>/dev/null`
    if [ $? -ne 0 ];then
	_GDM=/usr/sbin/gdm
    fi
    if [ -f "${_GDM}" ];then
	local _gdmver=`${_GDM} --version|awk '/GDM/{printf("gdm-%s",$2);}'`
	X11_PREREQ="${X11_PREREQ} GNOME:${_gdmver// /_}:gdm";
    else
	X11_PREREQ="${X11_PREREQ} <disabled:GNOME:gdm>";
    fi

    which gnome-terminal 2>/dev/null >/dev/null
    if [ $? -eq 0 ];then
	X11_PREREQ="${X11_PREREQ} GNOME:gnome-terminal";
    else
	X11_PREREQ="${X11_PREREQ} <disabled:GNOME:gnome-terminal>";
    fi

    which kdm 2>/dev/null >/dev/null
    if [ $? -eq 0 ];then
	X11_PREREQ="${X11_PREREQ} KDE:kdm";
    else
	X11_PREREQ="${X11_PREREQ} <disabled:KDE:kdm>";
    fi

    which fvwm 2>/dev/null >/dev/null
    if [ $? -eq 0 ];then
        local _fvwmver=`fvwm --version 2>&1 |awk '/Version/{printf("%s",$3);}'`
	X11_PREREQ="${X11_PREREQ} FVWM:fvwm-${_fvwmver// /_}:fvwm";
    else
	X11_PREREQ="${X11_PREREQ} <disabled:FVWM:fvwm>";
    fi

    which startxfce4 2>/dev/null >/dev/null
    if [ $? -eq 0 ];then
	local _xfcever=`xfce4-session --version|awk '/xfce4-session 4/{printf("%s-%s",$1,$2);}'`
	X11_PREREQ="${X11_PREREQ} XFCE:${_xfcever// /_}:startxfce4+xfce4-session";
    else
	X11_PREREQ="${X11_PREREQ} <disabled:Xfce4:startxfce4>";
    fi

    #currently somewhat restrictive to specific versions.
    case ${_verstrg} in
	"X Protocol Version 11"*)
	    X11_MAGIC=X11;
	    X11_VERSTRING=${_verstrg};
	    X11_STATE=ENABLED;
	    X11SERVER_OPT=;
	    X11VIEWER_OPT=;
	    ;;
         *)
	    X11_MAGIC=X11G;
	    X11SERVER_OPT=;
	    X11VIEWER_OPT=;
	    ;;
    esac
    printVerboseDebug ${DBG_LVL_UIE} $LINENO $_X11 "X11_MAGIC       = ${X11_MAGIC}"
    printVerboseDebug ${DBG_LVL_UIE} $LINENO $_X11 "X11_VERSTRING   = ${X11_VERSTRING}"
    printVerboseDebug ${DBG_LVL_UIE} $LINENO $_X11 "X11_STATE       = ${X11_STATE}"
    printVerboseDebug ${DBG_LVL_UIE} $LINENO $_X11 "X11_PREREQ      = ${X11_PREREQ}"
    printVerboseDebug ${DBG_LVL_UIE} $LINENO $_X11 "X11SERVER_OPT   = ${X11SERVER_OPT}"
    printVerboseDebug ${DBG_LVL_UIE} $LINENO $_X11 "X11VIEWER_OPT   = ${X11VIEWER_OPT}"
}





#FUNCBEG###############################################################
#NAME:
#  noClientServerSplitSupportedMessageX11
#
#TYPE:
#  bash-function
#
#DESCRIPTION:
#
#EXAMPLE:
#
#PARAMETERS:
#
#OUTPUT:
#  RETURN:
#  VALUES:
#
#FUNCEND###############################################################
function noClientServerSplitSupportedMessageX11 () {
    printERR $LINENO $_VMW_SESSION ${ABORT} "Unexpected ERROR!!!"
    printERR $LINENO $_VMW_SESSION ${ABORT} "X11 perfectly supports ClientServerSplit!!!"
}



#FUNCBEG###############################################################
#NAME:
#  clientServerSplitSupportedX11
#
#TYPE:
#  bash-function
#
#DESCRIPTION:
#  Checks whether the split of client and server is supported.
#  This is just a hardcoded attribute.
#
#EXAMPLE:
#
#PARAMETERS:
#
#OUTPUT:
#  RETURN:
#    0: If supported
#    1: else
#
#  VALUES:
#
#FUNCEND###############################################################
function clientServerSplitSupportedX11 () {
    printVerboseDebug ${DBG_LVL_MAINT} $LINENO $_X11 "$FUNCNAME $1"
    case $1 in
	CREATE)return 0;;
#	CONNECT)return 0;;
#	CANCEL)return 0;;
#	SUSPEND)return 0;;
#	RESUME)return 0;;
#	SHIFT)return 0;;
    esac
    return 1;
}

#FUNCBEG###############################################################
#NAME:
#  enumerateMySessionsX11
#
#TYPE:
#  bash-function
#
#DESCRIPTION:
#  Not supported.
#
#EXAMPLE:
#
#PARAMETERS:
#
#OUTPUT:
#  RETURN:
#  VALUES:
#
#FUNCEND###############################################################
function enumerateMySessionsX11 () {
    printVerboseDebug ${DBG_LVL_UID} $LINENO $_X11 "$FUNCNAME:\$@=${@}"
}




#
#Managed load of sub-packages which are required in almost any case.
#On-demand-loads will be performed within requesting action.
#
hookPackage "${_myPKGBASE_X11}/session"
#hookPackage "${_myPKGBASE_X11}/enumerate"
hookPackage "${_myPKGBASE_X11}/list"
hookPackage "${_myPKGBASE_X11}/info"



#FUNCBEG###############################################################
#NAME:
#  handleX11
#
#TYPE:
#  bash-function
#
#DESCRIPTION:
#
#EXAMPLE:
#
#PARAMETERS:
#  $1: <OPMODE>
#  $2: <ACTION>
#
#OUTPUT:
#  RETURN:
#
#  VALUES:
#
#FUNCEND###############################################################
function handleX11 () {
  printVerboseDebug ${DBG_LVL_UID} $LINENO $_X11 "${FUNCNAME}:$*"
  local OPMODE=$1;shift
  local ACTION=$1;shift

  case ${ACTION} in

      CREATE) 
          hookPackage "${_myPKGBASE_X11}/create"
          createConnectX11 ${OPMODE} ${ACTION} 
          ;;

      *)
          #unknown
          ABORT=1;
          printERR $LINENO $_X11 ${ABORT} "System Error, unsupported ACTION for X11:ACTION=${ACTION} OPMODE=${OPMODE}"
          ;;
  esac

}


#FUNCBEG###############################################################
#NAME:
#  initX11
#
#TYPE:
#  bash-function
#
#DESCRIPTION:
#
#EXAMPLE:
#
#PARAMETERS:
#
#OUTPUT:
#  RETURN:
#
#  VALUES:
#
#FUNCEND###############################################################
function initX11 () {
  local _curInit=$1;shift
  local _initConsequences=$1
  local ret=0;

  printVerboseDebug ${DBG_LVL_SUPPORT} $LINENO $_X11 "$FUNCNAME ${_curInit}"

  case $_curInit in
      0);;#NOP - Done by shell
      1)  #add own help to searchlist for options
	  MYOPTSFILES="${MYOPTSFILES} ${MYPKGPATH}/HOSTs/X11/help/${MYLANG}/010_x11"
          setVersionX11 $_initConsequences
          ret=$?
	  ;;
      2);;#Curently nothing todo.
      3);;#Curently nothing todo.
      4);;#Curently nothing todo.
      5);;#Curently nothing todo.
  esac

  return $ret
}
