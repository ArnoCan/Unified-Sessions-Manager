#!/bin/bash

########################################################################
#
#PROJECT:      Unified Sessions Manager
#AUTHOR:       Arno-Can Uestuensoez - acue@UnifiedSessionsManager.org
#MAINTAINER:   Arno-Can Uestuensoez - acue_sf1@sourceforge.net
#SHORT:        ctys
#CALLFULLNAME: Commutate To Your Session
#LICENCE:      GPL3
#VERSION:      01_06_001a10
#
########################################################################
#
# Copyright (C) 2007 Arno-Can Uestuensoez (UnifiedSessionsManager.org)
#
########################################################################

printDBG $S_CONF  ${D_FRAME} $LINENO $BASH_SOURCE "LOAD-CONFIG:${BASH_SOURCE}"



#Extend this when required, 
#e.g. PATH=${PATH}:/usr/sbin


#
#Base path, where the qemu packages for initial tests are stored
QEMU_BASE=${QEMU_BASE:-$HOME/qemu}


if [ -n "$C_EXECLOCAL" ];then
    [ -z "$CTYS_SETUPVDE" ]&&CTYS_SETUPVDE=`getPathName $LINENO $BASH_SOURCE ERROR ctys-setupVDE ${MYCALLPATH}`

    #
    #Can do this with any user, so sould be the same for the following
    #access-permissions too.
    #
    [ -z "$QEMU" ]&&QEMU=`getPathName $LINENO $BASH_SOURCE WARNINGEXT qemu /usr/local/bin`
    [ -z "$QEMU" ]&&QEMU=`getPathName $LINENO $BASH_SOURCE WARNINGEXT qemu /usr/bin`

    #
    #Currently supports "VirtualSquare/VDE" only for Networking on Linux-Platforms
    #
    [ -z "$VDE_TUNCTL" ]&&VDE_TUNCTL=`getPathName $LINENO $BASH_SOURCE WARNINGEXT vde_tunctl /usr/local/sbin`
    [ -z "$VDE_TUNCTL" ]&&VDE_TUNCTL=`getPathName $LINENO $BASH_SOURCE WARNINGEXT vde_tunctl /usr/sbin`

    [ -z "$VDE_SWITCH" ]&&VDE_SWITCH=`getPathName $LINENO $BASH_SOURCE WARNINGEXT vde_switch /usr/local/bin`
    [ -z "$VDE_SWITCH" ]&&VDE_SWITCH=`getPathName $LINENO $BASH_SOURCE WARNINGEXT vde_switch /usr/bin`

    [ -z "$VDE_UNIXTERM" ]&&VDE_UNIXTERM=`getPathName $LINENO $BASH_SOURCE WARNINGEXT unixterm /usr/local/bin`
    [ -z "$VDE_UNIXTERM" ]&&VDE_UNIXTERM=`getPathName $LINENO $BASH_SOURCE WARNINGEXT unixterm /usr/bin`

    [ -z "$VDE_DEQ" ]&&VDE_DEQ=`getPathName $LINENO $BASH_SOURCE WARNINGEXT vdeq  /usr/local/bin`
    [ -z "$VDE_DEQ" ]&&VDE_DEQ=`getPathName $LINENO $BASH_SOURCE WARNINGEXT vdeq  /usr/bin`

    [ -z "$VDE_DEQEMU" ]&&VDE_DEQEMU=`getPathName $LINENO $BASH_SOURCE WARNINGEXT vdeqemu /usr/local/bin`
    [ -z "$VDE_DEQEMU" ]&&VDE_DEQEMU=`getPathName $LINENO $BASH_SOURCE WARNINGEXT vdeqemu /usr/bin`


    ###

    [ -z "$CTYS_IP" ]&&CTYS_IP=`getPathName $LINENO $BASH_SOURCE ERROR ip /sbin`
    [ -z "$CTYS_IFCONFIG" ]&&CTYS_IFCONFIG=`getPathName $LINENO $BASH_SOURCE ERROR ifconfig /sbin`
    [ -z "$CTYS_IFUP" ]&&CTYS_IFUP=`getPathName $LINENO $BASH_SOURCE ERROR ifup /sbin`
    [ -z "$CTYS_IFDOWN" ]&&CTYS_IFDOWN=`getPathName $LINENO $BASH_SOURCE ERROR ifdown /sbin`
    [ -z "$CTYS_ROUTE" ]&&CTYS_ROUTE=`getPathName $LINENO $BASH_SOURCE ERROR route /sbin`

    case ${MYDIST} in
	CentOS)
	    [ -z "$CTYS_NETWORK" ]&&CTYS_NETWORK=`getPathName $LINENO $BASH_SOURCE ERROR network /etc/init.d`
	    [ -z "$CTYS_BRCTL" ]&&CTYS_BRCTL=`getPathName $LINENO $BASH_SOURCE ERROR brctl /usr/sbin`
	    [ -z "$CTYS_IPTABLES" ]&&CTYS_IPTABLES=`getPathName $LINENO $BASH_SOURCE ERROR iptables /sbin`
	    [ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNING nc /usr/bin`
	    ;;
	Fedora)
	    [ -z "$CTYS_NETWORK" ]&&CTYS_NETWORK=`getPathName $LINENO $BASH_SOURCE ERROR network /etc/init.d`
	    [ -z "$CTYS_BRCTL" ]&&CTYS_BRCTL=`getPathName $LINENO $BASH_SOURCE ERROR brctl /usr/sbin`
	    [ -z "$CTYS_IPTABLES" ]&&CTYS_IPTABLES=`getPathName $LINENO $BASH_SOURCE ERROR iptables /sbin`
	    [ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNING nc /usr/bin`
	    ;;
	SuSE)
	    [ -z "$CTYS_NETWORK" ]&&CTYS_NETWORK=`getPathName $LINENO $BASH_SOURCE ERROR network /etc/init.d`
	    [ -z "$CTYS_IPTABLES" ]&&CTYS_IPTABLES=`getPathName $LINENO $BASH_SOURCE ERROR iptables /usr/sbin`
	    [ -z "$CTYS_BRCTL" ]&&CTYS_BRCTL=`getPathName $LINENO $BASH_SOURCE ERROR brctl /sbin`

	    #[ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNINGEXT netcat /usr/bin`
	    [ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNINGEXT nc /usr/bin`
	    ;;

	openSUSE)
	    [ -z "$CTYS_NETWORK" ]&&CTYS_NETWORK=`getPathName $LINENO $BASH_SOURCE ERROR network /etc/init.d`
	    [ -z "$CTYS_IPTABLES" ]&&CTYS_IPTABLES=`getPathName $LINENO $BASH_SOURCE ERROR iptables /usr/sbin`
	    [ -z "$CTYS_BRCTL" ]&&CTYS_BRCTL=`getPathName $LINENO $BASH_SOURCE ERROR brctl /sbin`

	    #[ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNING netcat /usr/bin`
	    [ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNINGEXT nc /usr/bin`
	    ;;

	debian)
	    [ -z "$CTYS_NETWORK" ]&&CTYS_NETWORK=`getPathName $LINENO $BASH_SOURCE ERROR networking /etc/init.d`
	    [ -z "$CTYS_IPTABLES" ]&&CTYS_IPTABLES=`getPathName $LINENO $BASH_SOURCE ERROR iptables /sbin`
	    [ -z "$CTYS_BRCTL" ]&&CTYS_BRCTL=`getPathName $LINENO $BASH_SOURCE ERROR brctl /usr/sbin`

	    #[ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNING netcat /bin`
	    [ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNINGEXT nc /usr/bin`
	    ;;
	Ubuntu)
	    [ -z "$CTYS_NETWORK" ]&&CTYS_NETWORK=`getPathName $LINENO $BASH_SOURCE ERROR networking /etc/init.d`
	    [ -z "$CTYS_IPTABLES" ]&&CTYS_IPTABLES=`getPathName $LINENO $BASH_SOURCE ERROR iptables /sbin`
	    [ -z "$CTYS_BRCTL" ]&&CTYS_BRCTL=`getPathName $LINENO $BASH_SOURCE ERROR brctl /usr/sbin`

	    #[ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNING netcat /bin`
	    [ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNINGEXT nc /usr/bin`
	    ;;
	*)
	    [ -z "$CTYS_NETWORK" ]&&CTYS_NETWORK=`getPathName $LINENO $BASH_SOURCE ERROR network /etc/init.d`
	    [ -z "$CTYS_BRCTL" ]&&CTYS_BRCTL=`getPathName $LINENO $BASH_SOURCE ERROR brctl /usr/sbin`
	    [ -z "$CTYS_IPTABLES" ]&&CTYS_IPTABLES=`getPathName $LINENO $BASH_SOURCE ERROR iptables /sbin`

	    #[ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNING netcat /bin`
	    [ -z "$CTYS_NETCAT" ]&&CTYS_NETCAT=`getPathName $LINENO $BASH_SOURCE WARNINGEXT nc /usr/bin`
	    ;;
    esac

    if [ -z "$CTYS_NETCAT" ];then 
	printWNG 2 $LINENO $BASH_SOURCE ${ABORT} "Cannot use netcat call-variant(<1.89-1), lack of \"-U <UNIX-Domain>\""
	printWNG 2 $LINENO $BASH_SOURCE ${ABORT} "Missing CentOS/Redhat(TM)/OpenBSD call-variant \"nc\" with support of\"-U\""
	printWNG 2 $LINENO $BASH_SOURCE ${ABORT} " a.) refer to DebianBugReport #348564"
	printWNG 2 $LINENO $BASH_SOURCE ${ABORT} " b.) refer to netcat-openbsd version >= 1.89-1"
	if [ -z "$VDE_UNIXTERM" ];then
	    ABORT=1;
	    printERR $LINENO $BASH_SOURCE ${ABORT} "Missing MANDATORY fall-back \"unixterm\" from VDE package."
	    printERR $LINENO $BASH_SOURCE ${ABORT} " 1.) If possible, install \"nc\""
	    printERR $LINENO $BASH_SOURCE ${ABORT} "     a.) refer to DebianBugReport #348564"
	    printERR $LINENO $BASH_SOURCE ${ABORT} "     b.) refer to netcat-openbsd version >= 1.89-1"
	    printERR $LINENO $BASH_SOURCE ${ABORT} " 2.) Force the usage of \"netcat\" if you have installed a "
	    printERR $LINENO $BASH_SOURCE ${ABORT} "     never version."
	    printERR $LINENO $BASH_SOURCE ${ABORT} " 3.) Anyhow, in any case check your "
	    printERR $LINENO $BASH_SOURCE ${ABORT} "     VDE/VirtualDistributedEthernet/VirtualSquare"
	    printERR $LINENO $BASH_SOURCE ${ABORT} "     installation."
	else
	    printWNG 2 $LINENO $BASH_SOURCE ${ABORT} "Use fall-back \"unixterm\", please install \"nc\" soon."
	fi
    fi
fi

#
#Due to required root permissions for most of the calls to xm/virsh the 
#impersonation aproach either by sudo or ksu should be used for restricted
#calls. These calls might be released for call with root permissions 
#selectively by local impersonation as root or an execution-account, instead 
#of releasing the whole set of ctys. The ctys-tools should be executed as a 
#different user without enhanced privileges.
#
#When using the root account natively no additional permissions are required
#of course.
#
#
#For ordinary users without enhnaced privileges one of the following two 
#approaches could be applied:
#
# - ksu
#   The preferred approach should be the seamless usage of kerberos, therefore
#   "ksu" with the configuration file ".k5users" should be used.
#
#   For each user the following entry is required:
#
#     "<users-pricipal> /usr/bin/which /usr/sbin/xm /usr/bin/virsh"
#
#   Where the paths may vary.
#
#   Due to the required few calls to which, xm and/or virsh only ".k5login" 
#   is not required.
#
# - sudo
#   Basically the same, but to be handled by local configurations on any machine.
#
#
#QEMUCALL="${XENCALL:-ksu -e }"
#VDECALL="${VDECALL:-ksu -e }"


#
#Default behaviour for CANCEL
QEMU_CANCEL_DEFAULT=${QEMU_CANCEL_DEFAULT:-POWEROFF}


#
#Sets the virtual switch for interconnection of QEMU-VMs with the
#external NIC of current container, which could be VM itself.
QEMUSOCK=${QEMUSOCK:-$CTYS_SOCKBASE/vde_switch0.$USER}


#
#Sets the virtual switch for interconnection of QEMU-VMs with the
#external NIC of current container, which could be VM itself.
QEMUMGMT=${QEMUMGMT:-$CTYS_SOCKBASE/vde_mgmt0.$USER}


#
#Sets the virtual switch for interconnection of QEMU-VMs with the
#external NIC of current container, which could be VM itself.
QEMUBIOS=${QEMUBIOS:-$QEMU_BASE/pc-bios}


#
#Sets the pathname for the local unix-domain socket to be used for 
#QEMU VMs for monitor access.
#
#The following placeholders has to be replaced by their actual values:
#  ACTUALLABEL:  the LABEL of the actual VM to be managed.
#  ACTUALPID:    the PID of the actual VM to be managed.
QEMUMONSOCK=${QEMUMONSOCK:-$CTYS_SOCKBASE/qemumon.ACTUALLABEL.ACTUALPID.$USER}


#
#The signal spec to be ignored when CLI0 is used.
QEMU_SIGIGNORESPEC="${QEMU_SIGIGNORESPEC:-2 3 19}"


#
#The default console when non provided, final hard-coded 
#fall-back is VNC
QEMU_DEFAULT_CONSOLE=${QEMU_DEFAULT_CONSOLE:-VNC}

#
#The default console when non provided, final hard-coded 
#fall-back is VHDD
QEMU_DEFAULT_BOOTMODE=${QEMU_DEFAULT_BOOTMODE:-VHDD}

#
#Timeout for first attempt to connect to a VM after create call.
#QEMU requires longer to start, particularly within stacks, when
#multiplr layers are involved.
QEMU_INIT_WAITC=${QEMU_INIT_WAITC:-2}
QEMU_INIT_WAITS=${QEMU_INIT_WAITS:-2}

#
#Timeout for polling the base IP stack mainly after initial start.
#WAIT unit is seconds, REPEAT unit is #nr.
CTYS_PING_DEFAULT_QEMU=${CTYS_PING_DEFAULT_QEMU:-1};
CTYS_PING_ONE_MAXTRIAL_QEMU=${CTYS_PING_ONE_MAXTRIAL_QEMU:-20};
CTYS_PING_ONE_WAIT_QEMU=${CTYS_PING_ONE_WAIT_QEMU:-2};

#
#Timeout for polling the base SSH access, requires preconfigured permissions.
#WAIT unit is seconds, REPEAT unit is #nr.
CTYS_SSHPING_DEFAULT_QEMU=${CTYS_SSHPING_DEFAULT_QEMU:-0};
CTYS_SSHPING_ONE_MAXTRIAL_QEMU=${CTYS_SSHPING_ONE_MAXTRIAL_QEMU:-20};
CTYS_SSHPING_ONE_WAIT_QEMU=${CTYS_SSHPING_ONE_WAIT_QEMU:-2};


#
#Trials to interconnect a vncviewer to the QEMU-VM for "vnc"
QEMU_RETRYVNCCLIENTCONNECT=15; #numerical, integer - #trials
QEMU_RETRYVNCCLIENTTIMEOUT=3;  #numerical, integer - seconds

#
#individual QEMU defaults for STACKCHECK parameter
#0:OFF, 1:ON
_stackChkContextQEMU=0;
_stackChkHWCapQEMU=1;
_stackChkStacCapQEMU=1:
